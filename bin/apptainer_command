#!/bin/bash

# By Pierre Rioux, pierre.rioux@mcgill.ca,
# November 2019, December 2019, January 2020
#
# October 2023:
# Originally developed with 'singularity' as the
# container engine, this current version use
# 'apptainer' instead.
#
# November 2023:
# The options -I, -O and -D can be given in any order now.
#
# See https://github.com/aces/apptainer-squashfs-support
#
# The site above gives examples on how to invoke this script as a wrapper for
#
# a) mounting squashfs files using sshfs;
# b) running rsync inside a container with squashfs files;
# c) running any other command too while we're at it.
# d) starting an interactive shell
#
# This program has many capabilities that are triggered
# automatically by how it is NAMED at installation. If it
# is called any of these names, some default behaviors will
# be triggered:
#
#  apptainer_sftpd   # passthrough container command: sftp-server
#  apptainer_rsync   # passthrough container command: rsync
#  apptainer_shell   # interactive shell
#  apptainer_command_here # default sqfs and image: in install dir
#  apptainer_sftpd_here   # default sqfs and image: in install dir
#  apptainer_rsync_here   # default sqfs and image: in install dir
#  apptainer_shell_here   # default sqfs and image: in install dir

VERSION="3.1"
BASENAME=$(basename $0)
PREFIX="" # -D option

# Important note for developers: the sshd <-> sftp-server
# connection (or the sshd <-> rsync connection) is performed strictly
# with STDIN and STDOUT, so we are not allowed to pollute any
# of these two streams while running this script! If you need to
# debug, echo stuff to files in /tmp instead. E.g. like in
#
#   echo "inspecting prefix=$PREFIX" > /tmp/deb.1
#
# You can also add 'echo' in front of the final
# apptainer command to inspect it, as a way
# to inspect its final form.

# Why oh why is this not at the same place?
# When the container is launched, we'll look for both.
RPM_OPEN_SSH_SFTPD="/usr/libexec/openssh/sftp-server" # Centos location
APT_OPEN_SSH_SFTPD="/usr/lib/sftp-server"             # Ubuntu location

# Some build-in commands we support by default:
# For apptainer_sftpd : (automatically supports the two paths above too)
SFTPD_COMMAND="\$(type -p $RPM_OPEN_SSH_SFTPD || type -p $APT_OPEN_SSH_SFTPD)"
# For apptainer_rsync :
RSYNC_COMMAND="rsync" # hopefully it's in the search path in the container

# Documentation and usage statement
function usage() {
  cat <<USAGE 1>&2
This is $BASENAME $VERSION by Pierre Rioux

It will run a command in a apptainer container that has been started
with a set of overlays. By default, depending on the name of this
program, it will run the OpenSSH 'sftp-server', or the 'rsync' command.
This program can also be used to start an interactive shell if it
is named as 'apptainer_shell'.

Usage: $BASENAME [-D directory] [-I apptainer_image_file] [-O overlay_file_pattern] [command...]

where:

  -D directory

    is an optional base directory for finding both apptainer_image_file
    and overlay_file_pattern. If provided, the program will chdir there
    first before attempting to resolve the other arguments.

    If a directory is given and no other arguments are provided
    (that is, no apptainer_image_file and no overlay_file_pattern),
    then the program will pick the first file named "*.simg" (or
    "*.sif") in the directory as its apptainer image file, and
    will pick all files ending in .squashfs, .sqs, .sqfs, or .ext3
    as the overlays.

  -I apptainer_image_file

    is a path to an apptainer container image. The image must contain
    at least the openssh-server package (when running apptainer_sftpd)
    or the rsync package (when running apptainer_rsync). It can be
    a relative or absolute path. See also -D above.

  -O overlay_file_pattern

    is a file pattern for a set of overlay image files
    (e.g. /path/to/something*.squashfs).

  command args args...

    an optional command to run in the container. By default the command
    to run depends on the name of this very program:

    When the program is named 'apptainer_sftpd':
      The command will be $RPM_OPEN_SSH_SFTPD or $APT_OPEN_SSH_SFTPD
      (whichever is first found). This is the OpenSSH sftp-server.
    When the program is named 'apptainer_rsync':
      The command will be '$RSYNC_COMMAND'.

Installation shortcuts:

  If this program is installed in a directory and renamed with
  a '_here' at the end of the name, it will automatically internally
  assume that a '-D' option was provided with the path to the directory
  where the script is installed as argument. E.g.

     /path/to/apptainer_sftpd_here

  is the same as

     /path/to/apptainer_sftpd -D /path/to

Debug mode:

  If the first argument is '--debug', the program will not
  attempt to launch any apptainer process; instead it will
  provide a report about what the apptainer command itself
  would look like. This is only useful when the current
  mode of execution is to run a command or a shell. With
  a sftp or rsync servers, these will crash, of course,
  and you won't see the report itself.

Examples:

 # Overlays are given with a pattern:
 apptainer_sftpd -I centos.simg -O '*.squashfs'

 # Using a -D to specify where to look for all the files:
 apptainer_rsync -D /my/path -I centos.simg -O '*.squashfs' rsync_args_here

 # Using a -D to specify where to look just for the overlays:
 apptainer_sftpd -D /my/path -I /some/other/place/centos.simg -O '*.squashfs'

 # Using a -D and no other arguments:
 # a) apptainer image will be first .simg (or .sif)
 # b) overlays will be all .squashfs, .sqs or .ext3 files
 apptainer_sftpd -D /my/path/for/everything

 # Start a shell with a single squashfs file:
 apptainer_shell -D /my/path/for/everything -O data.squashfs

 # Debug the shell command above:
 apptainer_shell --debug -D /my/path/for/everything -O data.squashfs

 # Run a 'ls' command:
 apptainer_command -D /my/path/for/everything ls -l /some/containerized/path

USAGE
  exit 2
}

##########################################
# When this program is renamed to end with
# the string "_here", then it behaves as
# if the option "-D dir_of_script" was given.
##########################################
if test "X${BASENAME/*_here/Y}" = "XY" ; then
  # Note that 'readlink -e' only exists on Linux
  PREFIX=$(dirname $(readlink -e "$0")) || exit
fi

####################################
# Validation of arguments
####################################

if test -z "$PREFIX" -a $# -lt 2 ; then
  usage
fi

if test "X$1" = "X-h" -o "X$1" = "X-help" -o "X$1" = "X--help" ; then
  usage
fi

# Configure DEBUG mode (--debug)
DEBUG=""
if test "X$1" = "X--debug" ; then
  echo "Debug mode enabled: the apptainer command will not be executed,"
  echo "instead the command itself will be shown, as it would be executed."
  shift
  DEBUG="showargs"
fi

# This debug function 100% by your humble servant
function showargs() {
  echo ""
  echo "-------------------------"
  echo "Full command on one line:"
  echo "-------------------------"
  echo "$@"
  echo ""
  echo "-------------------------------"
  echo "Command breakdown by arguments:"
  echo "-------------------------------"
  c=0
  while test $# -gt 0 ; do
    echo "[$c] = '$1'"
    c=$(( $c + 1 ))
    shift
  done
}

# Main argument parsing loop. We just check for -D, -I or -O
while test "X$1" = "X-D" -o "X$1" = "X-I" -o "X$1" = "X-O" ; do

  # Optional PREFIX in -D
  if test "X$1" = "X-D" ; then
    PREFIX="$2"
    shift ; shift
    if ! test -d "$PREFIX" ; then
      echo "Error: '$PREFIX' for option -D is not a directory." 1>&2
      exit 2
    fi
  fi

  # Option -I: the path of the apptainer image
  if test "X$1" = "X-I" ; then
    test $# -lt 2 && usage
    APPT_IMAGE="$2" # can be empty string if -D provided
    shift ; shift
  fi

  # Option -O: the path (or pattern) for one or several overlay images
  if test "X$1" = "X-O" ; then
    test $# -lt 2 && usage
    OVERLAYS="$2";  # can also be empty if -D provided
    shift ; shift
  fi

done

# Find image and overlays if necessary
if test -n "$PREFIX" ; then

  # This is important, and it makes all the path
  # resolution code below relative to it now.
  cd "$PREFIX" || exit 2

  # Auto find image
  if test -z "$APPT_IMAGE" ; then # if no image given, find one
    APPT_IMAGE=$(ls -1 | egrep '\.simg$|\.sif$' | head -1)
    if test -z "$APPT_IMAGE" ; then
      echo "Error: can't find a .simg or .sif image in directory '$PREFIX'." 1>&2
      exit 2
    fi
  fi

  # Auto find overlays
  if test -z "$OVERLAYS" ; then
    OVERLAYS=$(ls -1 | egrep '\.squashfs$|\.sqs$|\.sqfs$|\.ext3$')
  fi

fi

# Validate image file
if ! test -f "$APPT_IMAGE" ; then
  test -n "$PREFIX" && echo "Error: while switched to directory '$PREFIX':" 1>&2
  echo "Error: '$APPT_IMAGE' doesn't seem to be present and an image file." 1>&2
  echo "Maybe you need to provide the path with -I ?"                       1>&2
  exit 2
fi

# Validate overlays patterns
if test -z "$OVERLAYS" ; then
  echo "Error: no patterns for the overlays files provided." 1>&2
  echo "Maybe you need to provide the path with -O ?"        1>&2
  exit 2
fi

# Generate apptainer overlays options, expanding patterns at the same time.
# Note that this is a place where errors can occur silently:
# if the user provide bad patterns that do not match any files, the
# pattern will be ignored.
APPT_OVERLAYS=$(ls -1 $OVERLAYS | sed -e 's/^/--overlay=/' -e 's/\.sqs$/.sqs:ro/' -e 's/\.squashfs/.squashfs:ro/' -e 's/\.sqfs/.sqfs:ro/')

# Figure out what program to run now;
# if this script is provided with a command, we run that;
# if this script is named "apptainer_sftpd", we run the OpenSSH sftp-server;
# if this script is named "apptainer_rsync", we run the rsync command.
# if this script is named "apptainer_shell", we start an interactive shell with no command.
COMMAND=""
MODE="exec"
if echo $BASENAME | grep apptainer_sftpd >/dev/null ; then
  COMMAND="$SFTPD_COMMAND"
elif echo $BASENAME | grep apptainer_rsync >/dev/null ; then
  COMMAND="$RSYNC_COMMAND"
elif echo $BASENAME | grep apptainer_shell >/dev/null ; then
  MODE="shell"
fi

# Help messages
if test "X$*" = "X-h" -o "X$*" = "X-help" -o "X$*" = "X--help" ; then
  usage
  exit 2
fi

# EXEC requires a command
if test "$MODE" = "exec" ; then
  if test -z "$COMMAND" && test -z "$*" ; then
    echo "Error: we do not know what command to run in the container." 1>&2
    echo "Try \"$0 -h\" for help" 1>&2
    exit 2
  fi
fi

# SHELL requires no commands
if test "$MODE" = "shell" ; then
  if test -n "$COMMAND" || test -n "$*" ; then
    echo "Error: when starting an interactive shell, no commands are allowed." 1>&2
    echo "Try \"$0 -h\" for help" 1>&2
    exit 2
  fi
fi

if test $MODE = "exec" ; then
  # OK do the main work now.
  #
  # I use two 'exec's to simplify the process hierarchy!
  #
  # How glorious!
  $DEBUG exec apptainer -s exec \
    $APPT_OVERLAYS         \
    $APPT_IMAGE            \
    bash -c "exec $COMMAND $*"
else # interactive shell
  $DEBUG exec apptainer -s shell \
    $APPT_OVERLAYS          \
    $APPT_IMAGE
fi

# If bash reaches this point, something is clearly wrong.
